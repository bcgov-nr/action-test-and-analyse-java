name: Java Unit Test and Analysis with SonarCloud
description: Run Java unit tests, can analyse with SonarCloud
branding:
  icon: check-square
  color: blue

inputs:
  ### Required
  commands:
    description: Commands to run unit tests, start with '|' for multi-line
    required: true
  dir:
    description: App/package directory
    required: true

  ### Typical / recommended
  java-cache:
    description: Java package manager cache, defaults to maven
    default: maven
  java-distribution:
    description: Java distribution, defaults to temurin
    default: temurin
  java-version:
    description: Java version, defaults to 17 (LTS)
    default: "17"
  sonar_args:
    # https://docs.sonarcloud.io/advanced-setup/analysis-parameters/
    description: SonarCloud command line arguments
    default: >
      -Dsonar.organization=bcgov-sonarcloud
      -Dsonar.projectKey=bcgov_${{ github.repository }}
  sonar_project_token:
    description: Sonar token, provide unpopulated token for pre-setup (will skip)

  ### Usually a bad idea / not recommended
  repository:
    description: Non-default repository to clone
    default: ${{ github.repository }}

runs:
  using: composite
  steps:
    # Process inputs
    - id: inputs
      shell: bash
      run: |
        # Process inputs
        if [ -z ${{ inputs.sonar_project_token }} ]; then
          shallowClone=1
          sonarCheck=true
        else
          shallowClone=0 >> $GITHUB_OUTPUT
          sonarCheck=false >> $GITHUB_OUTPUT
        fi

        if [ ${{ inputs.java-cache }} == "maven" ]; then
          sonarCmd="mvn -B verify org.sonarsource.scanner.maven:sonar-maven-plugin:sonar"
        elif [ ${{ inputs.java-cache }} == "gradle" ]; then
          sonarCmd="./gradlew build sonarqube --info"
        else
          echo "ERROR: inputs.java-cache = ${{ inputs.java-cache }}"
          exit 1
        fi

        echo shallowClone=${shallowClone} >> $GITHUB_OUTPUT
        echo sonarCheck=${sonarCheck} >> $GITHUB_OUTPUT
        echo sonarCmd=${sonarCmd} >> $GITHUB_OUTPUT

    # SonarCloud uses shallow clone (fetch-depth=0), which is a bit slower/heavier
    - uses: actions/checkout@v3
      with:
        fetch-depth: steps.inputs.outputs.shallowClone
        repository: ${{ inputs.repository }}

    # Setup node and cache dir
    - uses: actions/setup-java@v3
      with:
        cache: ${{ inputs.java-cache }}
        distribution: ${{ inputs.java-distribution }}
        java-version: ${{ inputs.java-version }}
        server-id: 'github'
        settings-path: ${{ github.workspace }}

    # Run tests, hopefully generating coverage for SonarCloud
    - shell: bash
      run: |
        # Run tests
        cd ${{ inputs.dir }}
        mkdir -p /home/runner/.m2/
        cp $GITHUB_WORKSPACE/settings.xml /home/runner/.m2/
        mvn -X clean | grep "settings"
        cat /home/runner/.m2/settings.xml

    ### Optional SonarCloud

    # Using sonar_project_token
    - if: steps.inputs.outputs.sonarCheck
      env:
        SONAR_TOKEN: ${{ inputs.sonar_project_token }}
      shell: bash
      run: |
        # Run SonarCloud for ${{ inputs.java-cache }}
        cd ${{ inputs.dir }}
        M2_HOME=$GITHUB_WORKSPACE mvn -X clean | grep "settings"

    ### Cleanup

    # Fix - Docker takes ownership of files, causing a cleanup fail
    - shell: bash
      id: get_uid
      run: |
        # User for workstation ownership reset/fix
        echo "uid=$(id -u ${USER})" >> $GITHUB_OUTPUT
    - uses: peter-murray/reset-workspace-ownership-action@v1
      with:
        user_id: ${{ steps.get_uid.outputs.uid }}

    # Fix - Clone for action.yml and other verifications
    - name: Checkout Action repo to pass tests
      uses: actions/checkout@v3
