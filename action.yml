name: Test and Analyze with Triggers and SonarCloud
description: Run node tests based on triggers, optional SonarCloud
branding:
  icon: check-square
  color: blue

inputs:
  ### Required
  commands:
    description: Commands to run tests, start with '|' for multi-line
    required: true

  dir:
    description: App/package directory
    required: true

  ### Typical / recommended
  java-cache:
    description: Java package manager cache, defaults to maven
    default: maven

  java-distribution:
    description: Java distribution, defaults to temurin
    default: temurin

  java-version:
    description: Java version, defaults to 17 (LTS)
    default: "17"

  sonar_args:
    # https://docs.sonarcloud.io/advanced-setup/analysis-parameters/
    description: SonarCloud command line arguments
    default: |
      -Dsonar.organization=bcgov-sonarcloud
      -Dsonar.projectKey=bcgov_${{ github.repository }}

  sonar_token:
    description: Sonar token, provide unpopulated token for pre-setup (will skip)

  triggers:
    description: Paths (array) used to trigger a build; e.g. ('./backend/' './frontend/)

  ### Usually a bad idea / not recommended
  diff_branch:
    description: Branch to diff against
    default: ${{ github.event.repository.default_branch }}

  repository:
    description: Non-default repository to clone (used for testing this action)
    default: ${{ github.repository }}

  branch:
    description: Non-default branch to clone (used for testing this action)
    default: ""

  triggers_event:
    description: Events (array) to use with triggers; e.g. ("pull_request" "push" "workflow_dispatch")
    default: "('pull_request')"

runs:
  using: composite
  steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
        repository: ${{ inputs.repository }}
        ref: ${{ inputs.branch }}

    - name: Warnings for breaking changes
      shell: bash
      run: |
        # Warnings for breaking changes

        # sonar_project_token renamed sonar_token
        if [ ! -z "${{ inputs.sonar_project_token }}" ]; then
          echo -e "\nsonar_project_token renamed.  Please correct this and try again."
          echo -e "\n\tAction: rename sonar_project_token to sonar_token\n"
          exit 1
        fi

        if [ ${{ inputs.java-cache }} == "maven" ]; then
          "sonarCmd=mvn -B verify org.sonarsource.scanner.maven:sonar-maven-plugin:sonar" >> $GITHUB_OUTPUT
        elif [ ${{ inputs.java-cache }} == "gradle" ]; then
          "sonarCmd=./gradlew build sonarqube --info" >> $GITHUB_OUTPUT
        else
          echo "ERROR: inputs.java-cache = ${{ inputs.java-cache }}"
          exit 1
        fi

    # Process variables and inputs
    - id: vars
      shell: bash
      run: |
        # Triggers and conditions

        # Arrays must be stored first
        TRIGGERS=${{ inputs.triggers }}
        T_EVENTS=${{ inputs.triggers_event }}

        # Default to triggered=true
        echo "triggered=true" >> $GITHUB_OUTPUT

        # Run/trigger conditions
        if [[ ! "${T_EVENTS}" =~ "${{ github.event_name }}" ]]
        then
          # Event doesn't match on type, so fire
          echo "Event not matched, so always test"
          exit 0
        elif [ -z "${TRIGGERS}" ]
        then
          # Triggers omitted, so fire
          echo "Triggers omitted, so always test"
          exit 0
        else
          # Check triggers against a git diff
          echo "Processing triggers"
          git fetch origin "${{ inputs.diff_branch }}"
          while read -r check; do
            for t in "${TRIGGERS[@]}"; do
              if [[ "${check}" =~ "${t}" ]]; then
                  echo -e "Triggered: ${t}\n --> ${check}"
                  exit 0
              fi
            done
          done < <(git diff origin/"${{ inputs.diff_branch }}" --name-only)
        fi

        # Conditions not met, do not fire
        echo "Triggers not matched, testing skipped"
        echo "triggered=false" >> $GITHUB_OUTPUT

    # Setup Java and cache dir
    - uses: actions/setup-java@v3
      with:
        cache: ${{ inputs.java-cache }}
        distribution: ${{ inputs.java-distribution }}
        java-version: ${{ inputs.java-version }}
        server-id: 'github'

    # Run tests, hopefully generating coverage for SonarCloud
    - name: Run Tests
      if: steps.vars.outputs.triggered == 'true'
      shell: bash
      run: |
        cd ${{ inputs.dir }}
        ${{ inputs.commands }}

    ### Optional SonarCloud

    # If sonar_token
    - if: steps.inputs.outputs.sonarCheck
      env:
        SONAR_TOKEN: ${{ inputs.sonar_token }}
      shell: bash
      run: |
        # Run SonarCloud for ${{ inputs.java-cache }}
        cd ${{ inputs.dir }}
        ${{ steps.inputs.outputs.sonarCmd }} \
          -Dsonar.host.url=https://sonarcloud.io ${{ inputs.sonar_args }}

    ### Cleanup

    # Fix - Docker can take file ownership, causing a cleanup fail
    - shell: bash
      if: steps.vars.outputs.triggered == 'true'
      id: get_uid
      run: |
        # User for workstation ownership reset/fix
        echo "uid=$(id -u ${USER})" >> $GITHUB_OUTPUT
    - uses: peter-murray/reset-workspace-ownership-action@v1
      if: steps.vars.outputs.triggered == 'true'
      with:
        user_id: ${{ steps.get_uid.outputs.uid }}

    # Fix - Clone for action.yml and other verifications
    - name: Checkout Action repo to pass tests
      if: always() && inputs.repository != github.repository
      uses: actions/checkout@v4
